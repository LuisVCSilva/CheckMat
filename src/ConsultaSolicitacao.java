
import java.beans.PropertyChangeEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
//jTextPane2.setText(jTable2.getSelectedRow()<0 ? "Selecione uma solicitação da tabela" : (String) itens[jTable2.getSelectedRow()][itens[0].length-1]);
public class ConsultaSolicitacao extends javax.swing.JFrame {
    public boolean isEditavel = false;
    ArrayList<String> itensMarcadosParaExclusao = new ArrayList<String>();
    Set itensMarcadosParaAtualizacao = new HashSet();
    java.sql.Statement stmt;
    public ConsultaSolicitacao() {
        try {
            this.stmt = SingletonSessao.getConn().createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaSolicitacao.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }
    
    TableColumn colunaEquipamento;
    JComboBox comboBoxLocal;
    JComboBox comboBoxEquipamento;
    JComboBox comboBoxTipoSolicitacao;
    JComboBox comboBoxTipoStatus;
    
    Object itens[][] = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Checkmat - Minhas solicitações");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setToolTipText("");
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        itens = null;
        try{
            itens = SingletonSessao.ConsultaSolicitacao("");
        }
        catch(SQLException e)
        {
        }
        jTable2.setBorder(new javax.swing.border.MatteBorder(null));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
        ));
        Object[] listaLocais = null;

        TableColumn colunaLocal = null;
        TableColumn colunaTipoSolicitacao = null;
        TableColumn colunaTipoStatus = null;

        try{
            listaLocais = (Object[]) SingletonSessao.ListaLocais();
        }
        catch(SQLException e)
        {
        }

        comboBoxLocal = new JComboBox(listaLocais);
        comboBoxLocal.setSelectedIndex(0);

        comboBoxEquipamento = new JComboBox();
        comboBoxEquipamento.addItem("Selecione um local primeiro");

        comboBoxLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxLocalActionPerformed(evt);
            }
        });

        comboBoxTipoSolicitacao = new JComboBox(SingletonSessao.TipoSolicitacao.toStringArray());
        comboBoxTipoSolicitacao.setSelectedIndex(0);

        comboBoxTipoStatus = new JComboBox(SingletonSessao.TipoStatus.toStringArray());
        comboBoxTipoStatus.setSelectedIndex(0);

        /*...*/
        jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable2.setFocusable(false);
        new JScrollPane(jTable2, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            itens,
            new String [] {
                "Data de abertura","Local","Equipamento","Tipo de solicitação", "Estado da solicitação", "Data de conclusão"
            }
        )
        {

            public boolean isCellEditable(int row,int column) {
                return isEditavel && column!=0 && column !=4 && column!=5 && itens[jTable2.getSelectedRow()][itens[jTable2.getSelectedRow()].length-5].equals("Não Consta");
            }

        }
    );

    for (int i=0;i<6;i++) {
        TableColumn column = jTable2.getColumnModel().getColumn(i);
        switch(i)
        {
            case 0:
            column.setPreferredWidth(100);
            break;

            case 1:
            column.setPreferredWidth(175);
            break;

            case 2:
            column.setPreferredWidth(100);
            break;

            case 3:
            column.setPreferredWidth(150);
            break;

            case 4:
            column.setPreferredWidth(150);
            break;

            case 5:
            column.setPreferredWidth(130);
            break;
        }
    }

    colunaLocal = jTable2.getColumnModel().getColumn(1);
    colunaLocal.setCellEditor(new DefaultCellEditor(comboBoxLocal));
    colunaLocal.setWidth(150);
    colunaEquipamento = jTable2.getColumnModel().getColumn(2);
    colunaEquipamento.setCellEditor(new DefaultCellEditor(comboBoxEquipamento));

    colunaTipoSolicitacao = jTable2.getColumnModel().getColumn(3);
    colunaTipoSolicitacao.setCellEditor(new DefaultCellEditor(comboBoxTipoSolicitacao));

    colunaTipoStatus = jTable2.getColumnModel().getColumn(4);
    colunaTipoStatus.setCellEditor(new DefaultCellEditor(comboBoxTipoStatus));

    jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    jScrollPane2.setViewportView(jTable2);
    jTable2.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent event) {
            jTextPane2.setText(jTable2.getSelectedRow()<0 ? "Selecione uma solicitação da tabela" : (String) itens[jTable2.getSelectedRow()][itens[0].length-4]);
            if(jTable2.getEditingRow()!=-1)
            {
                if(itensMarcadosParaAtualizacao.size()>=2)
                {
                    itensMarcadosParaAtualizacao.add(jTable2.getEditingRow() + "," + jTable2.getEditingColumn());
                }
                else
                {
                    itensMarcadosParaAtualizacao.add(jTable2.getEditingRow() + "," + jTable2.getEditingColumn());
                }
            }
        }
    });

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel1.setText("Descrição:");

    jTextPane2.setEditable(false);
    jTextPane2.setEnabled(false);
    jScrollPane3.setViewportView(jTextPane2);

    jButton3.setText("Fechar");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    jButton1.setText("Realizar alterações");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButton2.setText("Cancelar solicitação");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jButton1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton3))
                .addComponent(jScrollPane3))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
    

    private void comboBoxLocalActionPerformed(java.awt.event.ActionEvent evt) {                                           
    if((comboBoxLocal.getSelectedIndex()!=-1) && (jTable2.getColumnModel().getColumnCount()>0))
    {
    Object[] itensEquipamentos = null;
    try
    {
    itensEquipamentos = SingletonSessao.ListaEquipamentos(comboBoxLocal.getSelectedIndex()==comboBoxLocal.getComponentCount() ? -1 : comboBoxLocal.getSelectedIndex());
    comboBoxEquipamento = new JComboBox(itensEquipamentos);
    colunaEquipamento = jTable2.getColumnModel().getColumn(2);
    comboBoxEquipamento.setSelectedIndex(0);
    colunaEquipamento.setCellEditor(new DefaultCellEditor(comboBoxEquipamento));
    }
    catch (SQLException e){
    }
    }
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(isEditavel==false)
        {
        try {
            if(itensMarcadosParaExclusao.isEmpty()==false)
            {
            String comando = "DELETE FROM solicitacao WHERE idSolicitacao in (" + itensMarcadosParaExclusao.toString().replace("[","").replace("]","") + ")";
            stmt.execute(comando);
            }
            if(!itensMarcadosParaAtualizacao.isEmpty())
            {
            String itens2Update[] = new String[itensMarcadosParaAtualizacao.size()];
            itens2Update = (String[]) itensMarcadosParaAtualizacao.toArray(itens2Update);

            System.out.println("-------------------------");
            for(int i=0;i<itens2Update.length;i++)
            {
            String linha = itens2Update[i].substring(0, itens2Update[i].indexOf(","));
            String coluna = itens2Update[i].substring(itens2Update[i].indexOf(",")+1,itens2Update[i].length());
            System.out.println(linha + "," + coluna);//OK
            }
            //TODO
            /*String comando = "UPDATE solicitacao SET"
                        + " descricao='" + jTextPane2.getText() + "',"
                        + " status='" + SingletonSessao.TipoStatus.values()[comboBoxTipoStatus.getSelectedIndex()].name() + "',"
                        + " tipoSolicitacao='" + SingletonSessao.TipoSolicitacao.values()[comboBoxTipoSolicitacao.getSelectedIndex()].name() + "',"
                        + " FK_idLocal='" + "',"
                        + " FK_idEquipamento='" + "'"
                        + " WHERE idSolicitacao in(" + ")";*/
            }
            } catch (SQLException ex) {
            Logger.getLogger(ConsultaSolicitacao.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(false);
        }
        else
        {
                        Object[] options = {"Continuar com as alterações",
                                            "Sair sem salvar"};
                        int n = JOptionPane.showOptionDialog(rootPane,
                            "Parece que você deseja sair enquanto realiza alterações nas solicitações...\n"
                          + "O que você deseja fazer",
                            "Checkmat - Minhas Solicitações",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            options[1]);
                        if(n!=0)
                        {
                        this.setVisible(false);
                        }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        isEditavel = !isEditavel;
        jButton1.setText(isEditavel==true ? "Salvar Alterações" : "Realizar Alterações");
        jButton2.setText(isEditavel==true ? "Cancelar Alterações" : "Cancelar Solicitação");
        jTextPane2.setEnabled(!isEditavel);
        if(isEditavel==false)//Salvar alterações
        {
        JOptionPane.showMessageDialog(rootPane,"As alterações realizadas foram salvas","Checkmat - Minhas Solicitações", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    if(itens!=null)
    {
        if(itens.length>0)
        {
            if(isEditavel==true)
            {
            itensMarcadosParaExclusao.add((String) itens[jTable2.getSelectedRow()][itens[jTable2.getSelectedRow()].length-3]);
            itens = SingletonSessao.RemoveLinhaMatriz(itens,jTable2.getSelectedRow());
            jTable2.removeRowSelectionInterval(jTable2.getSelectedRow(), jTable2.getSelectedRow());
            jTable2.setModel(new javax.swing.table.DefaultTableModel(
                itens,
                new String [] {
                    "Data de abertura","Local","Equipamento","Tipo de solicitação", "Estado da solicitação", "Data de conclusão"
                }
            )
                {

                public boolean isCellEditable(int row,int column) {
                return isEditavel && column!=0 && column!=5;
                }

                }
            );
            }
            else
            {
            //Cancelar Alterações
            itens = SingletonSessao.getTabelaSolicitacoes();
            jTable2.setModel(new javax.swing.table.DefaultTableModel(
                itens,
                new String [] {
                    "Data de abertura","Local","Equipamento","Tipo de solicitação", "Estado da solicitação", "Data de conclusão"
                }
                )
                {

                @Override
                public boolean isCellEditable(int row,int column) {
                return isEditavel && column!=0 && column!=5;
                }

                }
            );
            isEditavel = false;
            jButton1.setText(isEditavel==true ? "Salvar Alterações" : "Realizar Alterações");
            jButton2.setText(isEditavel==true ? "Cancelar Alterações" : "Cancelar Solicitação");
            }
        }
    }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaSolicitacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaSolicitacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaSolicitacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaSolicitacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultaSolicitacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables
}
